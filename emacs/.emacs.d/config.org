#+TITLE: Emacs Config
#+AUTHOR: Joshua Read
#+DATE: <2020-02-27 Thu>

* Work settings
At work I can't install external packages due to security reasons. As a result I have a minimal config file, [[file:work.org][work.org]], using only core features as of Emacs 24. I am importing these settings first to avoid rewriting them in this config. 
#+BEGIN_SRC emacs-lisp
(require 'org)
(org-babel-load-file
  (expand-file-name "work.org" user-emacs-directory))
#+END_SRC
* Package installer
I want to use the =use-package= package to manage my packages. First I add the package archives then ensure =use-package= is automatically installed which is slightly verbose.
#+BEGIN_SRC emacs-lisp
;; INSTALL USE-PACKAGE

;; need the `package' package in order to install the better `use-package'
(require 'package)
(setq package-enable-at-startup nil) ;; faster startup

;; add package archives
(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/")) ; need this for org-contrib

;; initialise `package' package
(package-initialize)

;; automagically install `use-package' if not already installed
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; use the use-package package
(eval-when-compile
  (require 'use-package))
#+END_SRC
* UI
** Better defaults
#+BEGIN_SRC emacs-lisp
(use-package better-defaults
  :ensure t)
#+END_SRC
** Colour scheme
#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
  :ensure t
  :config
  (load-theme 'zenburn t))
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
(when (window-system)
  (set-frame-font "Fira Code"))
(let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
               (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
               (36 . ".\\(?:>\\)")
               (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
               (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
               (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
               (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
               (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
               (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
               (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
               (48 . ".\\(?:x[a-zA-Z]\\)")
               (58 . ".\\(?:::\\|[:=]\\)")
               (59 . ".\\(?:;;\\|;\\)")
               (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
               (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
               (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
               (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
               (91 . ".\\(?:]\\)")
               (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
               (94 . ".\\(?:=\\)")
               (119 . ".\\(?:ww\\)")
               (123 . ".\\(?:-\\)")
               (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
               (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
               )
             ))
  (dolist (char-regexp alist)
    (set-char-table-range composition-function-table (car char-regexp)
                          `([,(cdr char-regexp) 0 font-shape-gstring]))))
#+END_SRC
** Line numbering
#+BEGIN_SRC emacs-lisp
;; (global-display-line-numbers-mode)
;; (setq display-line-numbers-type 'relative)
#+END_SRC
* Magit
Bring up =magit-status= with C-x g.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC
* Org
Most of my org config is in work.org but here are a couple of extra bits.
#+BEGIN_SRC emacs-lisp
;(use-package org
;  :ensure org-plus-contrib)

; Import contacts' birthdays to display in agenda view
(use-package org-contacts
  :after org
  :custom (org-contacts-files '("~/Dropbox/Personal/org/contacts.org")))

; Import holidays to display in agenda view
(setq holiday-file "~/.emacs.d/holiday.el")
(load holiday-file)

; nicer unicode bullets
(use-package org-bullets
  :ensure t
  :after org
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
